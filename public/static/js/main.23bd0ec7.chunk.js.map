{"version":3,"sources":["Chat.js","App.js","serviceWorker.js","index.js"],"names":["Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","message","messages","socket","io","on","data","addMessage","console","log","setState","concat","toConsumableArray","sendMessage","ev","preventDefault","emit","author","_this2","react_default","a","createElement","className","style","marginTop","id","map","marginBottom","type","placeholder","value","onChange","target","onClick","React","Component","App","src_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAkEeA,cA7DX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,SAAU,GACVC,QAAS,GACTC,SAAU,IAEdV,EAAKW,OAASC,IAAG,8CAEjBZ,EAAKW,OAAOE,GAAG,kBAAmB,SAAUC,GACxCC,EAAWD,KAGf,IAAMC,EAAa,SAAAD,GACfE,QAAQC,IAAIH,GACZd,EAAKkB,SAAS,CAAER,SAAQ,GAAAS,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAMD,EAAKO,MAAMG,UAAjB,CAA2BI,MACnDE,QAAQC,IAAIjB,EAAKO,MAAMG,WAjBZ,OAoBfV,EAAKqB,YAAc,SAAAC,GACfA,EAAGC,iBACHvB,EAAKW,OAAOa,KAAK,eAAgB,CAC7BC,OAAQzB,EAAKO,MAAMC,SACnBC,QAAST,EAAKO,MAAME,UAExBT,EAAKkB,SAAS,CAAET,QAAS,MA1BdT,wEA6BV,IAAA0B,EAAAvB,KACL,OACIwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBC,MAAO,CAACC,UAAW,KACrDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,kBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWG,GAAG,YACxB9B,KAAKI,MAAMG,SAASwB,IAAI,SAAAzB,GACrB,OACIkB,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,UAAW,GAAIG,aAAa,KAAKR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBrB,EAAQgB,OAA1C,KAAoDhB,EAAQA,aAItHkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,YAAY,WAAWC,MAAOnC,KAAKI,MAAMC,SAAU+B,SAAU,SAAAjB,GAAE,OAAII,EAAKR,SAAS,CAAEV,SAAUc,EAAGkB,OAAOF,SAAUR,UAAU,iBAC9IH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,YAAY,UAAUP,UAAU,eAAeQ,MAAOnC,KAAKI,MAAME,QAAS8B,SAAU,SAAAjB,GAAE,OAAII,EAAKR,SAAS,CAAET,QAASa,EAAGkB,OAAOF,WAChJX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQY,QAAStC,KAAKkB,YAAaS,UAAU,gCAA7C,qBAnDjBY,IAAMC,WCWVC,0LARX,OACEjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgB,EAAD,cAJQF,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.23bd0ec7.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nclass Chat extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            message: '',\r\n            messages: []\r\n        };\r\n        this.socket = io('https://chat-realtime-sunisa.herokuapp.com');\r\n\r\n        this.socket.on('RECEIVE_MESSAGE', function (data) {\r\n            addMessage(data);\r\n        });\r\n\r\n        const addMessage = data => {\r\n            console.log(data);\r\n            this.setState({ messages: [...this.state.messages, data] });\r\n            console.log(this.state.messages);\r\n        };\r\n\r\n        this.sendMessage = ev => {\r\n            ev.preventDefault();\r\n            this.socket.emit('SEND_MESSAGE', {\r\n                author: this.state.username,\r\n                message: this.state.message\r\n            });\r\n            this.setState({ message: '' });\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4 offset-md-4\" style={{marginTop: 50}}>\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <div className=\"card-title\">Join Chat Here</div>\r\n                                <hr />\r\n                                <div className=\"messages\" id=\"messages\">\r\n                                    {this.state.messages.map(message => {\r\n                                        return (\r\n                                            <div style={{marginTop: 10, marginBottom:10}}><span className=\"message-border\">{message.author}: {message.message}</span></div>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                                <div className=\"footer\">\r\n                                    <input type=\"text\" placeholder=\"Username\" value={this.state.username} onChange={ev => this.setState({ username: ev.target.value })} className=\"form-control\" />\r\n                                    <br />\r\n                                    <input type=\"text\" placeholder=\"Message\" className=\"form-control\" value={this.state.message} onChange={ev => this.setState({ message: ev.target.value })} />\r\n                                    <br />\r\n                                    <button onClick={this.sendMessage} className=\"btn btn-primary form-control\">Send</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat;\r\n","\nimport React, { Component } from 'react';\nimport Chat from \"./Chat\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n          <Chat/>\n      </div>\n    );\n  }\n}\n\nexport default App;//\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}